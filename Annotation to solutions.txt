Hello!

My name is Sergei Riabinin. This is annotation to solutions for tasks.

The 1 task is:

    - Your goal for this question is to write a program that accepts two lines (x1,x2) and (x3,x4)
    on the x-axis and returns whether they overlap.
    As an example, (1,5) and (2,6) overlaps but not (1,5) and (6,8).

My solution is:
    sergei_riabinin_task1.py
    
    def segments_intersect(x1, x2, y1, y2):
            return x2 >= y1 and y2 >= x1 and x2 >= x1 and y2 >= y1

Use cases:

1. ((2, 5), (3, 7)) - True
2. ((3, 7), (2, 5)) - True
3. ((5, 2), (7, 3)) - unsuitable condition*
4. ((7, 3), (5, 2)) - unsuitable condition

5. ((2, 5), (6, 7)) - False
6. ((6, 7), (2, 5)) - False
7. ((5, 2), (7, 6)) - unsuitable condition
8. ((7, 6), (5, 2)) - unsuitable condition

9. ((5, 5), (6, 8)) - False
10. ((6, 8), (5, 5)) - False
11. ((5, 5), (8, 6)) - unsuitable condition
12. ((8, 6), (5, 5)) - unsuitable condition

13. ((7, 7), (6, 8)) - True
14. ((6, 8), (7, 7)) - True
15. ((7, 7), (8, 6)) - unsuitable condition
16. ((8, 6), (7, 7)) - unsuitable condition

17. ((-3, 1), (1, 5)) - True
18. ((1, 5), (-3, 1)) - True
19. ((1, -3), (5, 1)) - unsuitable condition
20. ((5, 1), (1, -3)) - unsuitable condition

21. ((-1, -6), (5, -3)) - unsuitable condition
22. ((5, -3), (-1, -6)) - unsuitable condition
23. ((-6, -1), (-3, 5)) - True
24. ((-3, 5), (-6, -1)) - True

25. ((4, 4), (5, 5)) - False
26. ((4, 4), (4, 4)) - True
27. ((0, 0), (0, 0)) - True
28. ((5, 7), (2, 9)) - True

* - unsuitable condition - end point of segment must not be less than start point



Task 2 is:

    - The goal of this question is to write a software library that accepts 2 version
    string as input and returns whether one is greater than, equal, or less than the other.
    As an example: “1.2” is greater than “1.1”. Please provide all test cases you
    could think of.
My solution:
    sergei_riabinin_task2.py
    
Use cases:

1. string and int ( 'banana' and 10 )
2. different strings ( 'banana' and 'banan' )
3. lowercase and uppercase same string ( 'Banana' and 'banana' )
4. int and float ( 10 and 10.1 )
5. float and float ( 1.2 and 1.3 )
6. values not None

Task 3 is:

    - At Ormuco, we want to optimize every bits of software we write. Your goal is to write a new library that can be integrated to the Ormuco stack. Dealing with network issues everyday, latency is our biggest problem. Thus, your challenge is to write a new Geo Distributed LRU (Least Recently Used) cache with time expiration. This library will be used extensively by many of our services so it needs to meet the following criteria:

    1 - Simplicity. Integration needs to be dead simple.
    2 - Resilient to network failures or crashes.
    3 - Near real time replication of data across Geolocation. Writes need to be in real time.
    4 - Data consistency across regions
    5 - Locality of reference, data should almost always be available from the closest region
    6 - Flexible Schema
    7 - Cache can expire 

My solution: 
    - sergei_riabinin_task3.py
    
create class for saving cache in dictionary, update and remove old cache.
In python there is functools.lru_cahce decorator which is battle-tested implementation in production code. Dead simple integration - just import functools. For example:

@functools.lru_cache(maxsize=64)
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)

What i didn't do yet: (reason not enough time to do it, but i'll do it :) maybe just for me)

3 - Near real time replication of data across Geolocation. Writes need to be in real time.
4 - Data consistency across regions
5 - Locality of reference, data should almost always be available from the closest region
6 - Flexible Schema
7 - Cache can expire




